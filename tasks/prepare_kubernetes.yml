---
- name: Prepare Kubernetes Cluster on Ubuntu
  hosts: all
  become: yes
  tasks:
    - name: Include external variables
      include_vars: ../variable/vars.yml

    - name: Disable Swap
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: Disable ufw Firewall
      service:
        name: ufw
        state: stopped
        enabled: false
      when: ansible_facts['os_family'] == "Debian"

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg2
        state: present
        update_cache: yes

    - name: Ajouter le dépôt officiel de Docker
      ansible.builtin.apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present
        update_cache: true

    - name: Ajouter la clé GPG du dépôt Docker
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Install containerd
      apt:
        name: containerd
        state: present
        update_cache: yes

    - name: Configure containerd
      copy:
        dest: /etc/containerd/config.toml
        content: |
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
        force: yes
      notify: restart containerd

    - name: Reload containerd configuration
      shell: containerd config default > /etc/containerd/config.toml
      notify: restart containerd

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure the Kubernetes APT keyring directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes APT key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
        filename: kubernetes
        update_cache: yes
        
    - name: Install required dependencies for Kubernetes
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      loop:
        - socat
        - ebtables
        - conntrack
      ignore_errors: yes  # Use this option with caution.

    - name: Install Kubernetes components
      apt:
        name: "{{ item }}"
        state: present
        force: yes
        update_cache: yes
        allow_downgrade: yes
      loop:
        - kubelet=1.31.2
        - kubeadm=1.31.2
        - kubectl=1.31.2

    - name: Determine the cgroup driver used by Docker
      shell: "docker info --format '{{ '{{' }}.CgroupDriver{{ '}}' }}'"
      register: docker_cgroup_driver
      changed_when: false

    - name: Configure kubelet to use the Docker cgroup driver
      lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: 'KUBELET_EXTRA_ARGS=--cgroup-driver={{ docker_cgroup_driver.stdout }}'
        create: yes

    - name: Enable and start kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Apply sysctl settings for Kubernetes networking
      shell: |
        cat <<EOF > /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        EOF
        sysctl --system

    - name: Hold Kubernetes components at their current version
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Reboot the system
      reboot:
        msg: "Rebooting for kernel parameters update"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime

  handlers:
    - name: restart containerd
      ansible.builtin.systemd:
        name: containerd
        state: restarted
